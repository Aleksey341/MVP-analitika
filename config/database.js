const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è
const dbConfigRW = {
    host: process.env.DB_HOST_RW || 'amvera-alex1976-cnpg-reports-db-rw',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'reports',
    user: process.env.DB_USER || 'reports_admin',
    password: process.env.DB_PASSWORD || 'Qwerty12345!',
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    max: 20, // –º–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –¥–∞—à–±–æ—Ä–¥)
const dbConfigRO = {
    ...dbConfigRW,
    host: process.env.DB_HOST_RO || 'amvera-alex1976-cnpg-reports-db-ro',
    max: 10, // –º–µ–Ω—å—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è readonly
};

// –ü—É–ª –¥–ª—è –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
const pool = new Pool(dbConfigRW);

// –ü—É–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
const poolRO = new Pool(dbConfigRO);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
pool.on('error', (err, client) => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î (RW):', err);
});

poolRO.on('error', (err, client) => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î (RO):', err);
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function testConnections() {
    try {
        const clientRW = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (RW) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        clientRW.release();

        const clientRO = await poolRO.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (RO) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        clientRO.release();
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
        process.exit(1);
    }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
testConnections();

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function query(text, params, useReadOnly = false) {
    const targetPool = useReadOnly ? poolRO : pool;
    const start = Date.now();

    try {
        const res = await targetPool.query(text, params);
        const duration = Date.now() - start;

        console.log(`üîç Executed query (${useReadOnly ? 'RO' : 'RW'}):`, {
            duration: `${duration}ms`,
            rows: res.rowCount
        });

        return res;
    } catch (error) {
        console.error('üö® Database query error:', {
            error: error.message,
            query: text,
            params: params
        });
        throw error;
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function transaction(callback) {
    const client = await pool.connect();

    try {
        await client.query('BEGIN');
        const result = await callback(client);
        await client.query('COMMIT');
        return result;
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

module.exports = {
    pool,
    poolRO,
    query,
    transaction
};