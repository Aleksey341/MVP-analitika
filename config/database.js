// config/database.js
'use strict';
const { Pool } = require('pg');

const bool = v => ['1', 'true', 'yes', 'on'].includes(String(v || '').toLowerCase());

// ---- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ö–æ—Å—Ç—ã
const RW_HOST = process.env.PGHOST     || process.env.DB_HOST     || '';
const RO_HOST = process.env.PGHOST_RO  || process.env.DB_HOST_RO  || RW_HOST;

// ---- –û–±—â–∞—è –±–∞–∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const base = {
  port: Number(process.env.PGPORT || process.env.DB_PORT || 5432),
  database: process.env.PGDATABASE || process.env.DB_NAME || 'reports',
  user: process.env.PGUSER || process.env.DB_USER || 'reports_admin',
  password: process.env.PGPASSWORD || process.env.DB_PASSWORD || 'Qwerty12345!',
  max: Number(process.env.PGPOOL_MAX || 20),
  idleTimeoutMillis: Number(process.env.DB_IDLE_TIMEOUT || 30000),
  connectionTimeoutMillis: Number(process.env.DB_CONN_TIMEOUT || 2000),
  ssl: bool(process.env.PGSSL || (process.env.NODE_ENV === 'production'))
    ? { rejectUnauthorized: bool(process.env.PGSSL_REJECT_UNAUTHORIZED) }
    : undefined,
};

// –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—É–ª–æ–≤: RW –∏ RO
const dbConfigRW = { host: RW_HOST, ...base, max: Number(process.env.PGPOOL_MAX || 20) };
const dbConfigRO = { host: RO_HOST, ...base, max: Number(process.env.PGPOOL_MAX_RO || 10) };

console.log(`[DB] RW host=${dbConfigRW.host} | RO host=${dbConfigRO.host} | ssl=${!!base.ssl}`);

// –ü—É–ª—ã
const pool   = new Pool(dbConfigRW);
const poolRO = new Pool(dbConfigRO);

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –ø—É–ª–æ–≤
pool.on('error',   err => console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î (RW):', err));
poolRO.on('error', err => console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î (RO):', err));

// –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RO (–ø–µ—Ä–µ–∫–ª—é—á–∏–º –Ω–∞ false, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —É–ø–∞–¥—ë—Ç)
let roAvailable = true;

// –°–∞–º–æ—Ç–µ—Å—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function testConnections() {
  // RW ‚Äî –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
  try {
    const c = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (RW) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    c.release();
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (RW):', err.message);
    // RW –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –ø–∞–¥–∞–µ–º
    process.exit(1);
  }

  // RO ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å RW)
  try {
    const c = await poolRO.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (RO) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    c.release();
    roAvailable = true;
  } catch (err) {
    if (dbConfigRO.host !== dbConfigRW.host) {
      console.warn('‚ö†Ô∏è  ReadOnly —Ö–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –∏–∑ RW:', err.message);
    }
    roAvailable = false;
  }
}

// –∑–∞–ø—É—Å–∫ —Å–∞–º–æ—Ç–µ—Å—Ç–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è)
testConnections().catch(e => console.error('Test connect error:', e));

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
async function query(text, params, useReadOnly = false) {
  const start = Date.now();
  let target = (useReadOnly && roAvailable) ? poolRO : pool;

  try {
    const res = await target.query(text, params);
    const ms = Date.now() - start;
    console.log(`üîç Executed query (${target === poolRO ? 'RO' : 'RW'}): ${ms}ms, rows=${res.rowCount}`);
    return res;
  } catch (err) {
    // –ï—Å–ª–∏ —É–ø–∞–ª –ø–µ—Ä–≤—ã–π RO-–∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ–º–µ—Ç–∏–º RO –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ RW
    if (useReadOnly && roAvailable) {
      console.warn('‚ö†Ô∏è  RO –∑–∞–ø—Ä–æ—Å —É–ø–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ RW. –ü—Ä–∏—á–∏–Ω–∞:', err.message);
      roAvailable = false;
      const res = await pool.query(text, params);
      const ms = Date.now() - start;
      console.log(`üîÅ Fallback to RW: ${ms}ms, rows=${res.rowCount}`);
      return res;
    }

    console.error('üö® Database query error:', {
      error: err.message,
      query: text,
      params
    });
    throw err;
  }
}

// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ RW)
async function transaction(callback) {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const result = await callback(client);
    await client.query('COMMIT');
    return result;
  } catch (error) {
    try { await client.query('ROLLBACK'); } catch (_) {}
    throw error;
  } finally {
    client.release();
  }
}

module.exports = {
  pool,
  poolRO,
  query,
  transaction,
};
