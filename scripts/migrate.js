const fs = require('fs');
const path = require('path');
const { Client } = require('pg');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º RW)
const dbConfig = {
    host: process.env.DB_HOST_RW || 'amvera-alex1976-cnpg-reports-db-rw',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'reports',
    user: process.env.DB_USER || 'reports_admin',
    password: process.env.DB_PASSWORD || 'Qwerty12345!',
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
};

async function runMigrations() {
    const client = new Client(dbConfig);

    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ß–∏—Ç–∞–µ–º —Å—Ö–µ–º—É
        const schemaPath = path.join(__dirname, '..', 'database', 'schema.sql');
        const schema = fs.readFileSync(schemaPath, 'utf8');

        console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã...');
        await client.query(schema);
        console.log('‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        // –ß–∏—Ç–∞–µ–º seed –¥–∞–Ω–Ω—ã–µ
        const seedPath = path.join(__dirname, '..', 'database', 'seed.sql');
        const seed = fs.readFileSync(seedPath, 'utf8');

        console.log('üå± –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await client.query(seed);
        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const municipalitiesResult = await client.query('SELECT COUNT(*) FROM municipalities');
        const indicatorsResult = await client.query('SELECT COUNT(*) FROM indicators_template');

        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
        console.log(`   –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤: ${municipalitiesResult.rows[0].count}`);
        console.log(`   –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: ${indicatorsResult.rows[0].count}`);

        console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        process.exit(1);
    } finally {
        await client.end();
    }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
if (require.main === module) {
    runMigrations().catch(console.error);
}

module.exports = { runMigrations };