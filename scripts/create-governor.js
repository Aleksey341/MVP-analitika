// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä"
// –ó–∞–ø—É—Å–∫: node scripts/create-governor.js

const bcrypt = require('bcrypt');
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST_RW,
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function createGovernor() {
  try {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä –õ–∏–ø–µ—Ü–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"...\n');

    // –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultPassword = 'Governor2025';
    const passwordHash = await bcrypt.hash(defaultPassword, 10);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å 'governor' –≤ CHECK constraint –¥–ª—è role
    try {
      await pool.query(`
        ALTER TABLE users DROP CONSTRAINT IF EXISTS users_role_check;
        ALTER TABLE users ADD CONSTRAINT users_role_check CHECK (role IN ('admin', 'operator', 'governor'));
      `);
      console.log('‚úÖ Constraint –¥–ª—è —Ä–æ–ª–∏ governor –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (e) {
      console.log('‚ö†Ô∏è  Constraint —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é governor
    const checkResult = await pool.query(`SELECT id FROM users WHERE role = 'governor'`);

    if (checkResult.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updateQuery = `
        UPDATE users
        SET password_hash = $1, is_active = $2
        WHERE role = 'governor'
        RETURNING id, municipality_id, role;
      `;
      var result = await pool.query(updateQuery, [passwordHash, true]);
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å governor –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (municipality_id = NULL, —Ç–∞–∫ –∫–∞–∫ governor –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—É)
      // –°–Ω–∞—á–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–º constraint UNIQUE(municipality_id)
      await pool.query(`ALTER TABLE users DROP CONSTRAINT IF EXISTS users_municipality_id_key`);

      const insertQuery = `
        INSERT INTO users (municipality_id, password_hash, role, is_active)
        VALUES ($1, $2, $3, $4)
        RETURNING id, municipality_id, role;
      `;

      var result = await pool.query(insertQuery, [
        null,                    // municipality_id = NULL –¥–ª—è –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–∞
        passwordHash,            // password_hash
        'governor',              // role
        true                     // is_active
      ]);
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   –õ–æ–≥–∏–Ω (municipality_id): governor');
    console.log('   –ü–∞—Ä–æ–ª—å:', defaultPassword);
    console.log('   –†–æ–ª—å:', result.rows[0].role);
    console.log('   ID:', result.rows[0].id);
    console.log('\nüîó –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ "–û–±—â–∏–π –¥–∞—à–±–æ—Ä–¥"');

    await pool.end();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    await pool.end();
    process.exit(1);
  }
}

createGovernor();
